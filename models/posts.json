{"automating-the-command-line":{"title":"Automating the Command Line","body":"&lt;p&gt;Designers are often put in a tough spot. They&#39;re expected to own HTML and CSS, which means they have to have a development environment. But that entails stuff like running a server, a CSS preprocessor, autoprefixer, managing npm or bower dependencies, using version control, etc. For simple projects, lucky folks can get away with something like CodeKit and a git GUI, but in most cases there will be a need to use the terminal somewhere along the line.&amp;nbsp;&lt;/p&gt;&lt;p&gt;In my opinion, this is a problem. On a recent project, every day a panicked designer would come to saying that after pulling latest the app was totally broken, showing only a blank page. Invariably, someone had checked in a new bower dependency and a quick &lt;code&gt;bower install&lt;/code&gt; was the solution. I quickly realized that not only could we automate bower and npm installs, but we could automate nearly all of the command line tasks required in a normal development workflow.&amp;nbsp;&lt;/p&gt;&lt;p&gt;Here&#39;s how I set up a file that, when double-clicked, does the following:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Mounts a directory from a development EC2 instance to the local machine via SSHFS&lt;/li&gt;&lt;li&gt;Opens up an iterm tab, SSHes into the dev box, and runs git status in the working directory&lt;/li&gt;&lt;li&gt;Opens up a second iterm tab and runs a grunt watch task that does stuff like:&lt;ul&gt;&lt;li&gt;runs &lt;code&gt;bower install&lt;/code&gt; when bower.json changes&lt;/li&gt;&lt;li&gt;runs &lt;code&gt;npm install&lt;/code&gt; when package.json changes&lt;/li&gt;&lt;li&gt;restarts the server when server-dependent files change&lt;/li&gt;&lt;li&gt;the usual compilation, linting, and unit testing stuff that grunt watch is used for&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;ul&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;test&lt;/p&gt;"}}