{"declarative-dom-manipulation":{"title":"Declarative DOM Manipulation","body":"&lt;p&gt;I recently found myself staring down the barrel of a big project that had to be server-rendered and wouldn&amp;#39;t work as a single page app, but would still have quite a bit of interactivity. I started prototyping with jQuery, but after nearly a year of using a lot of Angular I couldn&amp;#39;t just sit there and write a series of click handlers, checking for this state and that class and we already clicked there so this time do that... I immediately missed &amp;quot;the angular way.&amp;quot; There are a number of battle-tested frameworks out there that provide data binding in its various forms, but this felt like another opportunity to challenge myself and create a solution.&lt;/p&gt;\r\n&lt;p&gt;So I put together this little micro-library for DOM manipulation that provides a level of abstraction which allows me to simply describe the conditions under which elements should have a given state, and the events which should trigger DOM updates. It borrows some syntax from jQuery to make things approachable, but feels more like a two-way binding framework (without any template syntax). I haven&amp;#39;t settled on a name for it, and am not ready to publish it to NPM, so for now I&amp;#39;ll just use the variable &lt;code&gt;x&lt;/code&gt; to reference it in my examples.&lt;/p&gt;\r\n&lt;p&gt;Let&amp;#39;s make a script that adds the word &amp;quot;clicked&amp;quot; to a textarea when you click a button:&lt;/p&gt;\r\n&lt;pre&gt;&lt;code&gt;x(&amp;#39;textarea&amp;#39;).bind({\r\n    content: () =&amp;gt; {\r\n        return this.value + &amp;#39;clicked &amp;#39;;\r\n    }\r\n}).when({\r\n    click: &amp;#39;button&amp;#39;\r\n});\r\n&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So we have a &lt;code&gt;bind&lt;/code&gt; method that, in this case, sets the content of an element to the value returned by a function, in which &lt;code&gt;this&lt;/code&gt; refers to the bound element. We need to run that function every time the button is clicked, so we add a &lt;code&gt;when&lt;/code&gt; call that runs the bind every time a &lt;code&gt;click&lt;/code&gt; event occurs on the element matching the &lt;code&gt;&amp;#39;button&amp;#39;&lt;/code&gt; selector, which passes through to &lt;code&gt;document.querySelectorAll&lt;/code&gt;.&lt;/p&gt;\r\n&lt;p&gt;Let&amp;#39;s say we want to toggle an &lt;code&gt;&amp;#39;active&amp;#39;&lt;/code&gt; class on the textarea every time the button is clicked. You can set a class either by returning it from a function, or using a boolean.&lt;/p&gt;\r\n&lt;pre&gt;&lt;code&gt;x(&amp;#39;textarea&amp;#39;).bind({\r\n    content: () =&amp;gt; {\r\n        return this.value + &amp;#39;clicked &amp;#39;;\r\n    },\r\n        class: () =&amp;gt; {\r\n            return klass;\r\n        }\r\n}).when({\r\n    click: &amp;#39;button&amp;#39;\r\n});\r\n&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Of course, we can bind to more than an element&amp;#39;s content. Keys on the object passed to &lt;code&gt;bind&lt;/code&gt;, with the exception of &lt;code&gt;content&lt;/code&gt;, are treated as element attributes. There are additional methods for binding an element to an event on another element, unbinding, and removing handlers. I want to run it through some more use cases to make sure I&amp;#39;m covering all my bases before I publish it, although to be honest I might not get around to it. There are lots of libraries that do similar things, and while this was a fun little side project, I&amp;#39;ve got my eye on some other things now (&lt;a href=&quot;vuejs.org&quot;&gt;Vue.js&lt;/a&gt;, looking at you!)&lt;/p&gt;\r\n","date":"Sun Nov 01 2015"}}