{"persistent-in-memory-sessions":{"title":"Persistent in-memory sessions for NodeJS","body":"&lt;p&gt;When I set out to write authentication for &lt;a href=&quot;/breadbox&quot;&gt;Breadbox&lt;/a&gt;, I had to decide if I wanted sessions to be stored in a database or in memory. You could also store them in cookies or local storage, but those options are subject to browser limitations and inconsistencies. The database option is the de facto standard, for a few reasons:&lt;/p&gt;\r\n&lt;ul&gt;\r\n&lt;li&gt;It&amp;#39;s more scalable&lt;/li&gt;\r\n&lt;li&gt;It&amp;#39;s more portable (session info can easily be shared between app servers)&lt;/li&gt;\r\n&lt;li&gt;It&amp;#39;s persistent (if you restart your server the sessions are still there)&lt;/li&gt;\r\n&lt;/ul&gt;\r\n&lt;p&gt;But I found myself stuck on the obvious downside: you have to make an extra database call on every single request. For the purposes of a simple blog server that would realistically only ever have one user logged in at a time, I hated the idea of hitting a database just to see if the request is authenticated. At the same time, the thought of losing all current session info any time I restart the server wasn&amp;#39;t acceptable. After furrowing my brow for a while at the apparent wall-and-a-hard-place situation, I realized that there is a little feature of Node that would allow me to create in-memory sessions that would survive a server restart - on purpose or due to a crash.&lt;/p&gt;\r\n&lt;p&gt;By hooking in to &lt;code&gt;process.on(&amp;#39;uncaughtException&amp;#39;)&lt;/code&gt; and &lt;code&gt;process.on(&amp;#39;SIGINT&amp;#39;)&lt;/code&gt;, I get a chance to do dump the session data to a JSON file before the server actually shuts down. Then, when the server starts up, I read the JSON dump into the session object and delete the file. It looks like this:&lt;/p&gt;\r\n&lt;pre&gt;&lt;code&gt;&amp;lt;i&amp;gt;// Before crashing, save current sessions.&amp;lt;/i&amp;gt;\r\nprocess.on(&amp;#39;uncaughtException&amp;#39;, err =&amp;gt; {\r\n  fs.writeFile(&amp;#39;session-dump.json&amp;#39;, JSON.stringify(session.all()), () =&amp;gt; {\r\n    console.error(err.stack);\r\n    process.exit(1);\r\n  });\r\n});\r\n\r\n&amp;lt;i&amp;gt;// Before interrupting the server manually, save current sessions.&amp;lt;/i&amp;gt;\r\nprocess.on(&amp;#39;SIGINT&amp;#39;, () =&amp;gt; {\r\n  db.put(&amp;#39;session-dump&amp;#39;, session.all()).then(() =&amp;gt; {\r\n    process.exit();\r\n  });\r\n});\r\n\r\n&amp;lt;i&amp;gt;// On start up, recover session data, if any.&amp;lt;/i&amp;gt;\r\ndb.get(&amp;#39;session-dump&amp;#39;).then(data =&amp;gt; {\r\n  session.set(data);\r\n  db.drop(&amp;#39;session-dump&amp;#39;);\r\n});\r\n&lt;/code&gt;&lt;/pre&gt;","date":"Thu Oct 29 2015"}}