{"automating-the-command-line":{"title":"Automating the Command Line","body":"<p>Designers are often put in a tough spot. They&#39;re expected to own HTML and CSS, which means they have to have a development environment. But that entails stuff like running a server, a CSS preprocessor, autoprefixer, managing npm or bower dependencies, using version control, etc. For simple projects, lucky folks can get away with something like CodeKit and a git GUI, but in most cases there will be a need to use the terminal somewhere along the line.</p>\r\n<p>In my experience, this is a problem. On a recent project, at some point every day a designer would report that after pulling latest the app was totally broken, showing only a blank page. Usually, someone had checked in a new bower dependency and a quick <code>bower install</code> was the solution. I quickly realized that not only could we automate bower and npm installs, but we could automate nearly all of the command line tasks required in a normal development workflow.</p>\r\n<p>Here&#39;s how I set up a file that, when double-clicked, does the following:</p>\r\n<ul>\r\n<li>Mounts a directory from a development EC2 instance to the local machine via SSHFS</li>\r\n<li>Opens up an iterm tab and runs a grunt watch task that does stuff like:<ul>\r\n<li>runs <code>bower install</code> when bower.json changes</li>\r\n<li>runs <code>npm install</code> when package.json changes</li>\r\n<li>restarts the server when appropriate files change</li>\r\n</ul>\r\n</li>\r\n<li>Opens up a second iterm tab, SSHes into the dev box, and goes to the working directory for git commands.</li>\r\n<li>the usual compilation, linting, and unit testing stuff that grunt watch is used for</li>\r\n</ul>\r\n<p>There are a handful of scripts involved, with launch.command being the one designers can click on to get to work. unmount.command can also be clicked to unmount the project and end the grunt process.</p>\r\n<ul>\r\n<li>launch/<ul>\r\n<li>scripts/<ul>\r\n<li>git.expect</li>\r\n<li>grunt-watch.expect</li>\r\n<li>kill-grunt.expect</li>\r\n</ul>\r\n</li>\r\n<li>config.sh</li>\r\n<li>launch.command</li>\r\n<li>unmount.command</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<h3 id=&quot;config-sh&quot;>config.sh</h3>\r\n<pre><code># your development server\r\nHOST=&quot;dev.server.com&quot;\r\n# your user on the server\r\nUSER=&quot;username&quot;\r\n# an empty local dir to mount the remote files in\r\nLOCAL=&quot;mountpoint&quot;\r\n# path to the repo on the server\r\nREMOTE=&quot;remote/working/directory&quot;\r\n# where to run grunt on the server\r\nGRUNTDIR=&quot;path/to/grunt/dir&quot;\r\n</code></pre><h3 id=&quot;launch-command&quot;>launch.command</h3>\r\n<p>This script does three main things:</p>\r\n<ul>\r\n<li>Mounts the remote working directory using <a href=&quot;http://fuse.sourceforge.net/sshfs.html&quot;>SSHFS</a></li>\r\n<li>Tells iTerm to open a tab and run the grunt-watch.expect script</li>\r\n<li>Tells iTerm to open another tab and run the git.expect script</li>\r\n</ul>\r\n<pre><code>#!/bin/bash\r\n# reset $PWD\r\ncd dirname $0\r\nDIR=$PWD\r\n\r\n# get config\r\n. $DIR/config.sh\r\n\r\n# make sure the mount point exists\r\ncd ~ &gt; /dev/null\r\nchmod -R +x $DIR &gt; /dev/null 2&gt;&amp;1\r\nmkdir $LOCAL &gt; /dev/null 2&gt;&amp;1\r\n\r\necho &quot;mounting the remote filesystem...&quot;\r\n\r\n# mount the remote with some performance &amp; usability options\r\nsshfs $USER@$HOST:$REMOTE $LOCAL -ovolname=$LOCAL,Ciphers=arcfour,reconnect,noappledouble,follow_symlinks\r\n\r\necho &quot;opening iterm...&quot;\r\n\r\n# switch to osascript to talk to OSX\r\nosascript &lt;&lt;-eof\r\n  tell application &quot;iTerm&quot;\r\n    set _term to (make new terminal)\r\n    tell _term\r\n\r\n      # open an item tab and run the grunt-watch script in it\r\n      launch session &quot;Default session&quot;\r\n      tell the last session\r\n        set name to &quot;grunt&quot;\r\n        write text &quot;$DIR/scripts/grunt-watch.expect &#39;$HOST&#39; &#39;$USER&#39; &#39;$GRUNTDIR&#39; &#39;$GRUNTCMD&#39;&quot;\r\n      end tell\r\n\r\n      # open a second tab for git\r\n      launch session &quot;git&quot;\r\n      tell the last session\r\n        set name to &quot;git&quot;\r\n        write text &quot;$DIR/scripts/git.expect &#39;$HOST&#39; &#39;$USER&#39; &#39;$REMOTE&#39;&quot;\r\n      end tell\r\n    end tell\r\n  end tell\r\neof\r\nosascript -e &#39;quit app &quot;Terminal&quot;&#39; &amp; exit 0\r\n</code></pre><h3 id=&quot;grunt-watch-expect&quot;>grunt-watch.expect</h3>\r\n<p>Expect is a pretty cool scripting language that can be used to interact with a terminal, sending different commands depending on what gets logged to stdout. This means you can handle situations like a first-time log in, in which the user is prompted to add the hostname to their list of known hosts. And before you ask, I wouldn&#39;t try to automate logging in with a plaintext password. You could, but there&#39;s no reason not to use RSA keys.</p>\r\n<pre><code>#!/usr/bin/expect\r\n# get config options\r\nset HOST [lindex $argv 0]\r\nset USER [lindex $argv 1]\r\nset GRUNTDIR [lindex $argv 2]\r\nset GRUNTCMD [lindex $argv 3]\r\n\r\n# log in\r\nspawn ssh $USER@$HOST\r\nexpect &quot;yes/no&quot; { \r\n    send &quot;yes\\r&quot;\r\n} &quot;$ &quot; {\r\n    # set session from expect to bash and run grunt\r\n        # if your grunt task runs another process like a django or node server,\r\n        # consider adding sudo killall python/node to prevent &#39;port already in use&#39;\r\n        # when resuming after an interrupted session\r\n    send &quot;sudo chsh -s /bin/bash; cd $GRUNTDIR; sudo killall grunt; $GRUNTCMD\\r&quot;\r\n}\r\n# hand control over to the user\r\ninteract\r\n</code></pre><h3 id=&quot;git-expect&quot;>git.expect</h3>\r\n<p>Similar deal here, but this time we&#39;re just opening a tab in which to use git. You can try using git or a git GUI in the mounted directory on your local machine, but I&#39;ve found that to be super slow, so I run git from the server.</p>\r\n<pre><code>#!/usr/bin/expect\r\nset HOST [lindex $argv 0]\r\nset USER [lindex $argv 1]\r\nset REMOTE [lindex $argv 2]\r\nspawn ssh $USER@$HOST\r\nexpect &quot;yes/no&quot; {\r\n    send &quot;yes\\r&quot;\r\n} &quot;$ &quot; {\r\n    send &quot;sudo chsh -s /bin/bash; cd $REMOTE; git status\\r&quot;\r\n}\r\ninteract\r\n</code></pre><h3 id=&quot;unmount-command&quot;>unmount.command</h3>\r\n<p>This is the file you can double-click on to unmount the project and kill the grunt process that we started on the server.</p>\r\n<pre><code>#!/bin/bash\r\n# reset $PWD\r\ncd dirname $0\r\n# source config options\r\n. $PWD/config.sh\r\n# pass the options to the kill-grunt.expect script\r\n$PWD/scripts/kill-grunt.expect $HOST $USER\r\n# unmount the project\r\ndiskutil unmount force ~/$LOCAL\r\nosascript -e &#39;quit app &quot;Terminal&quot;&#39; &amp; exit 0\r\n</code></pre><h3 id=&quot;kill-grunt-expect&quot;>kill-grunt.expect</h3>\r\n<p>This one is called by unmount.command. It ends any grunt processes running on the server.</p>\r\n<pre><code>#!/usr/bin/expect\r\nset HOST [lindex $argv 0]\r\nset USER [lindex $argv 1]\r\nspawn ssh $USER@$HOST\r\nexpect &quot;$ &quot; {\r\n    send &quot;sudo killall grunt\\r&quot;\r\n    expect &quot;$ &quot; { exit }\r\n}\r\n</code></pre>","date":"Sat Oct 10 2015","live":"on"}}