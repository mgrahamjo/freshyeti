{"bower-is-doomed":{"title":"Bower is doomed","body":"<p>I know it&apos;s a rookie mistake to make sweeping predictions about technology, but I haven&apos;t made the mistake yet, so I&apos;m doing it.</p>\r\n\r\n<p>Bower was built to be npm for the front end. The only real difference was that bower gave you a flat directory structure, while npm would build a deeply nested dependency tree which wasn&apos;t suitable for referencing from <code>&lt;script></code> tags. Bower did an okay job of fulfilling the need, although for some reason people run into a lot of weird issues. It&apos;s easy to get permissions messed up, error messages can be cryptic, and I&apos;ve even seen bower get in a state where it insists you have a dependency installed that you simply don&apos;t. However, this post isn&apos;t to complain about my difficulties - my point is that something big has happened that undermines the entire value proposition of bower.</p>\r\n\r\n<p>That&apos;s right - npm 3+ has a <a href=&quot;https://docs.npmjs.com/how-npm-works/npm3&quot; target=&quot;_blank&quot;>flat directory structure</a>. The npm organization is already on-record as saying they want to be the &quot;package manager for JavaScript&quot; as opposed to the package manager for Node, so this was no surprise. If you&apos;re using bower and npm right now, I&apos;d suggest checking to see if you can consolidate - chances are that all of your bower dependencies are available via npm.</p>\r\n\r\n<p>I&apos;ve stopped using bower for all new projects.</p>","date":"Sat Feb 06 2016","live":"on"}}