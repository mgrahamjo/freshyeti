{"node-template-engine":{"title":"Writing a Node Template Engine Was Harder Than I Expected","body":"<h2 id=&quot;the-problem&quot;>The Problem</h2>\r\n<p>When I set out to make <a href=&quot;/breadbox&quot;>Breadbox</a>, a simple MVC framework for Node, perhaps the most daunting task was writing my own template engine. But, being a UI-focused dev, it&#39;s a challenge I was excited about. Not only was I sure to learn a lot, but I wasn&#39;t particularly happy with any existing template engines out there. Most of them seem to have weird arbitrary syntaxes, limitations, or conventions. For example, let&#39;s say you have a simple context object:</p>\r\n<pre><code>let context = &lcub; name: &#39;Mike&#39; }\r\n</code></pre><p>With <a href=&quot;http://olado.github.io/doT/index.html&quot;>doT.js</a>, to render this property, you have to name the context, and reference <code>name</code> as a property of that named object. Then, if <code>name</code> is undefined, you have to handle that with template logic, so to safely show a simple variable it looks like this:</p>\r\n<pre><code>&lcub;&lcub;=context.name || &#39;&#39;}}\r\n</code></pre><p>I don&#39;t know why anyone would be okay with this. There&#39;s no reason this basic variable reference shouldn&#39;t look like this:</p>\r\n<pre><code>&lcub;&lcub;name}}\r\n</code></pre><p>One more example. <a href=&quot;http://handlebarsjs.com&quot;>Handlebars</a>, aside from being insanely slow, imposes restrictions that I&#39;ve found to be unnecessary and unergonomic. Let&#39;s say you have a context with an array:</p>\r\n<pre><code>let context = &lcub;\r\n  property: 42,\r\n    list: [&lcub;\r\n      property: 11\r\n    }]\r\n};\r\n</code></pre><p>Think about what this will produce:</p>\r\n<pre><code>&lcub;&lcub;#each list}}\r\n  &lcub;&lcub;property}}\r\n&lcub;&lcub;/each}}\r\n</code></pre><p>If you answered <code>11</code>, you&#39;re correct. This makes pretty good sense in a trivial example like this, but in real-world apps with deeply nested context objects and complex templates, you very often need to be able to reference a property at any level of the context. In Handlebars, to reference the top-level <code>property</code>, 42, you have to do this:</p>\r\n<pre><code>&lcub;&lcub;#each list}}\r\n  &lcub;&lcub;../property}}\r\n&lcub;&lcub;/each}}\r\n</code></pre><p>You can imagine how anything beyond a level or two of nesting becomes unreasonably difficult to manage when you&#39;re using file path syntax to reference object properties. I wanted to make sure it was easy to reference properties with an intuitive sytax like this:</p>\r\n<pre><code>&lcub;&lcub;for item in list}}\r\n  &lcub;&lcub;property}} &lt;!-- 42 --&gt;\r\n  &lcub;&lcub;item.property}} &lt;!-- 11 --&gt;\r\n&lcub;&lcub;endfor}}\r\n</code></pre><h2 id=&quot;to-regex-or-not-to-regex&quot;>To Regex or Not To Regex</h2>\r\n<p>My proof of concept was to write a module that would output markup given a context object and a simple template string like <code>&lcub;&lcub;variable}}</code>. But before starting, I had to make a critical decision:  do I use regular expressions, or write a proper parser? If you Google this topic you&#39;ll find basically unanimous agreement that you can&#39;t write a parser that supports nested structures using regex (at least not JavaScript&#39;s regex) because it doesn&#39;t support recursive matches. So, according to StackOverflow regex isn&#39;t an option. But if there&#39;s a way to solve a problem that&#39;s better than any approach out there, it inherently won&#39;t be on StackOverflow, so I find myself ignoring the sage advice of the StackOracles.</p>\r\n<p>So I&#39;ll admit it - I kind of went into this with my mind set on regex. There&#39;s something kind of magical about the succinctness and power of it. And if I were going to write a parser, I&#39;d probably want to offload from JavaScript to another language with better char-by-char string processing, and that&#39;s a whole can of worms. No, for this job, I wanted to keep it simple. What a joke.</p>\r\n","date":"Sun Jan 03 2016","live":"on"}}