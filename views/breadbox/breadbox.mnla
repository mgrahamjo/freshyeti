<div class="section">

	<a name="breadbox"></a>

	<h1>The breadbox module</h1>

	<a name="init"></a>

	<h3>Initialization</h3>

	<pre class="language-javascript"><code>require('breadbox')( [Object] config );</code></pre>

	<p>When called as a function, the breadbox module accepts a config object and runs your app. The config object may have the following properties:</p>

	<ul>
		<li><code>controllers</code> (object): an object on which keys are the routes (URLs) of your app, and values are functions which perform the business logic for the corresponding route. <a href="#controllers">Read more below</a>.</li>
		<li><code>loginPage</code> (string): the URL of the page at which users can log in. Defaults to <code>'/login'</code>.</li>
		<li><code>loginView</code> (string): the absolute path to the .mnla file to use as the login view.</li>
		<li><code>logoutPage</code> (string): the URL of the page at which users can log out. Defaults to <code>'/logout'</code>.</li>
		<li><code>logoutView</code> (string): the absolute path to the .mnla file to use as the logout view.</li>
		<li><code>port</code> (number): the port on which to run the app. Defaults to <code>1337</code>.</li>
		<li><code>cacheLength</code> (number): the number of seconds to instruct browsers to cache assets for (via the 'Cache-Control' header). Defaults to <code>2419200</code> (four weeks).</li>
		<li><code>cacheHtml</code> (boolean): whether or not to instruct browsers to cache HTML assets. Defaults to <code>false</code>.</li>
		<li><code>sessionLength</code> (number): The length (in milliseconds) that inactive sessions remain valid. Defaults to 10 minutes.</li>
		<li><code>viewsPath</code> (string): the path to the directory in which to look for view files, relative to the project root. Defaults to <code>'views'</code>.</li>
		<li><code>partialsPath</code> (string): the path to the directory in which to look for partial view files, relative to the project root. Defaults to the same location as <code>viewsPath</code>.</li>
		<li><code>dataPath</code> (string): the path to the directory in which data will be stored, relative to the project root. Defaults to <code>'data'</code>.</li>
	</ul>

</div>

<p>After initializing your application, you can use <code>require('breadbox')</code> to access the <code>breadbox</code> object. It is also available globally as <code>global.breadbox</code>.</p>

<p>The <code>breadbox</code> object exposes the following methods and properties:</p>

<div class="section">

	<a name="db"></a>

	<h3>breadbox.db</h3>

	<p><code>breadbox.db</code> is an object that provides a set of lightweight data access methods. It works by storing and manipulating <a href="http://www.json.org/" target="_blank">JSON</a> files in the <code>data</code> folder of your project's root directory. </p>

	<p><code>breadbox.db</code> exposes the following methods:</p>

	<ul>
		<li><a name="db-put"></a><code>db.put( [string] path, [any] data, ([string] key) )</code>: saves the provided data to a JSON file at the given path (relative to <code>models/</code>), optionally using a key to only update a portion of the JSON file.</li>
			<ul>
				<li><code>path</code> (string) indicates which JSON file in the <code>models</code> folder to update. <code>'index'</code> would update <code>/models/index.json</code>, while <code>'posts/1'</code> would update <code>/models/posts/1.json</code>.</li>
				<li><code>data</code> (anything) is the data to save. If <code>key</code> is not supplied, the whole file will be overwritten, otherwise:</li>
				<li><code>key</code> (string) inidcates the part of the JSON file to update. <code>breadbox.db.put('index', 1, 'posts[2].count')</code> would first get the latest data from <code>index.json</code>, then set <code>data.posts[2].count</code> to <code>1</code>. Always be as specific as possible when using the <code>put</code> method - this safeguards against concurrent users over-writing each other's changes.</li>
			</ul>
		<li><a name="db-get"></a><code>db.get( [string] path )</code>: returns a promise that resolves to the parsed JSON object at the given path.</li>
		<li><a name="db-drop"></a><code>db.del( [string] path, [string] key )</code>: if <code>key</code> is provided, deletes the corresponding property of the JSON object at <code>path</code>. If not, deletes the JSON file at <code>path</code>.</li>
	</ul>

	<p>All <code>breadbox.db</code> methods return promise objects which resolve when the operation succeeds.</p>

<pre class="language-javascript"><code>const db = require('breadbox').db;

<i>// Get a blog post</i>
db.get('posts').then(posts => {
	let article = {
		title: posts[0].title,
		body: posts[0].content
	};
});
</code></pre>

</div>

<div class="section">

	<a name="promise"></a>

	<h3>breadbox.promise</h3>

	<p>Breadbox uses a slightly enhanced <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank">promise</a> implementation internally - specifically, any number of arguments can be passed to <code>resolve()</code>. This implementation is exposed to you in case you would like to take advantage of this enhancement.<p>

	<p>The <code>breadbox.promise</code> method accepts a function that performs an asyncronous operation. This function is passed <code>resolve</code> and <code>reject</code> arguments, which can be called to handle the result of the operation.</p>

	<ul>
		<li><code>resolve( [any] data, (...) )</code>: calls the <code>then</code> callback with the given arguments.</li>
		<li><code>reject( [any] error )</code>: calls the <code>catch</code> callback with the given error.</li>
	</ul>

	<p><code>breadbox.promise</code> returns an object with two methods:</p>

	<ul>
		<li><code>then( [function] callback )</code>: calls the supplied function with the successful results of an asyncronous operation.</li>
		<li><code>catch( [function] callback )</code>: calls the supplied function with an error if the asyncronous operation fails.</li>
	</ul>

	<p>For example:</p>

<pre class="language-javascript"><code>const breadbox = require('breadbox');

function getData() {

	return breadbox.promise((resolve, reject) => {

		doAsync('operation', (err, data) => {
			if (err) {
				reject(err);
			} else {
				resolve(data, 'This is a message');
			}
		});

	});
}

getData().then((data, message) => {
	console.log(data, message);
}).catch(error => {
	console.trace(error.stack);
});
</code></pre>

</div>

<div class="section">

	<a name="error-handling"></a>

	<h3>Error Handling</h3>

	<p>Traditionally, error handling has been a pain in Node. All asyncronous operations need to be able to return errors, which means developers have to devote a lot of lines of code to error checking. <code>breadbox.handle</code> provides a convienent way to safely return a styled error page if necessary, or else continue running seamlessly.</p>

</div>

<div class="section">

	<a name="handle"></a>

	<strong>breadbox.handle</strong>

	<p><code>breadbox.handle( [any] error, ([number] status), ([object] headers), ([boolean] die) )</code>: returns a promise object that will resolve only if <code>error</code> is falsy. It accepts three arguments:</p>

	<ul>
		<li><code>error</code> (any): a value that may or may not represent an error. Typically this is returned from an operation and needs to be checked for truthiness before continuing normal execution.</li>
		<li><code>status</code> (number): the HTTP status code that will be used if <code>error</code> is truthy. Defaults to <code>500</code>.</li>
		<li><code>headers</code> (object): any headers you want to send. Defaults to <code>'Content-Type': 'text/html'</code>.</li>
		<li><code>die</code> (boolean): if truthy, the error will cause the server to crash rather than returning an error page. Sometimes it is best to crash and restart the app to prevent execution in a corrupt state.</li>
	</ul>

	<p>A typical use case:</p>

<pre class="language-javascript"><code>const fs = require('fs'),
handle = require('breadbox').handle;

fs.readFile('/path/to/file.json', { encoding: 'utf8' }, (err, data) => {

	handle(err).then(() => {

		let successfulData = JSON.parse(data);
	});

});
</code></pre>

</div>

<div class="section">

	<a name="attempt"></a>

	<strong>breadbox.attempt</strong>

	<p><code>breadbox.attempt( [function] try, ([function] catch) )</code>: a wrapper for <code>try</code>/<code>catch</code>. If the execution of <code>try</code> raises an exception, <code>breadbox.attempt</code> passes the error to <code>catch</code>, or to <code>breadbox.handle</code> if <code>catch</code> is undefined.</p>

	<p>Additionally, <code>breadbox.attempt</code> returns a promise which will be resolved with the result of a successful call to <code>try</code>.</p>

<pre class="language-javascript"><code>const attempt = require('breadbox').attempt;

attempt(() => {

	return global.possiblyDefined.data;

}, err => {
	
	console.log('global.possiblyDefined is undefined');

}).then(data => {
	
	console.log('global.possiblyDefined.data is ' + data);
});
</code></pre>

</div>