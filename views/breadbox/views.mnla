<div class="section">

	<a name="views"></a>

	<h1>Views</h1>

	<p>Breadbox uses a fast, simple template engine (published separately as <a href="https://github.com/mgrahamjo/manila">Manila</a>). It has no proprietary template syntax - it simply uses JavaScript. </p>

</div>

<div class="section">

	<a name="variables"></a>

	<h3>Variables</h3>

	<p><code>&lt;: expression :></code>: This tag will be replaced with the HTML-escaped result of evaluating the expression or variable with the current context.</p> 

	<p><code>&lt;:: expression ::></code>: Use three carets instead of two to prevent HTML-escaping of the expression.</p> 

<pre class="language-javascript"><code>// Controller
...
let context = {
	name: 'Mike',
	html: '&lt;h1>test&lt;/h1>'
};
resolve(context);
</code></pre>
<pre class="language-html"><code>&lt;!-- views/index.mnla -->
My name is &lt;: name :>.
&lt;: html :>
&lt;:: html ::>

&lt;!-- output: -->
My name is Mike.
&amp;lt;h1&amp;gt;test&amp;lt;/h1&amp;gt;
&lt;h1>test&lt;/h1>
</code></pre>
</div>

<div class="section">

	<a name="includes"></a>

	<h3>Includes</h3>

	<p><code>&lt;: include path/to/file :></code>: Includes the content of the named template as part of the current template. <code>path/to/file</code> is relative to <code>views/</code> unless overwritten during configuration.</p> 

</div>

<div class="section">

	<h3>Blocks</h3>

	<p>With the exception of ES2015 template strings, you can use whatever JavaScript you like to iterate and conditionally render markup. Here are some examples:</p>

</div>

<div class="section">

	<a name="conditionals"></a>

	<h3>Conditionals</h3>

<pre class="language-html"><code>&lt;: if (expression) { :>
	&lt;p>This markup renders if expression is truthy.&lt;/p>
&lt;: } else { :>
	&lt;p>This markup renders if expression is falsy&lt;/p>
&lt;: } :>
</code></pre>

</div>

<div class="section">

	<a name="loops"></a>

	<h3>Array Loops</h3>

<pre class="language-html"><code>&lt;: list.forEach(item => { :>
	&lt;li>&lt;:item:>&lt;/li>
&lt;: }) :>
</code></pre>

</div>

<div class="section">

	<h3>Object Loops</h3>

<pre class="language-html"><code>&lt;: for (key in obj) { :>
	&lt;li>&lt;:key:> is &lt;:obj[key]:>&lt;/li>
&lt;: } :>
</code></pre>

</div>
